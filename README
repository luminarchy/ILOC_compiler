//NAME: Amy Suo
//NETID: as331

To run full parsing and allocation: ./allocate [k] [filename]
    parse: parse calls ScanParse.py. The main function parses command line arguments and looks for flags [-h, -s, -p, -r] and a file name. 
        -h prints a help message
        -s uses a while loop to read each read of the file and prints them in <token, lexeme> format 
        -p scans and parses the file to find any errors
        -r scans and parses the file and prints out the IR 
        
    allocate: allocate calls RenameAllocator.py. Scans and parses the given file, and then allocates physical registers for each source register. Outputs an renamed and allocated ILOC block. 
        -h prints a help message
        -x renames source registers to virtual registers ONLY
        usage: ./allocate [-flag/k] [filename]
            k - number of physical registers to be used for allocation ie: ./allocate 16 text.i
            filename - file to parse



    Scanner_New.py: uses match case to direct scan the file instead. Avoids building a large delta table.
    
    Scanner.py: A Scanner class to help with scanning. Follows the dfa algorithm. At initialization, a 30x37 delta transition table is built. The file is 
    scanned through a line buffer that reads one line from the file at a time. Calling the scanNext() function on the Scanner
    scans the next word in the buffer. 
        Instead of storing a stack of previous states, the scanner instead stores a variable of the last accepting state. If 
        the error state is reached without having encountered an accepting state, this variable is 0, and the scanner returns
        an error. A counter is also used to count the number of characters read since the last accepting state, so that the scanner
        can rollback. This is for time efficiency, since the traditional method uses a loop to rollback and also has to continuously
        check the set of accepting states to see if the rollback has reached an accepting state. 
    
    Parser.py: A Parser class to help with parsing. The parse builds the IR, storing opcodes as indices in a list, where they 
    can then be converting back into strings. 

    Allocator.py: A register allocator from VR to PR with spill. 
        AllocatorNS.py: A register allocator without spill for when k > MaxLive

    Renamer.py: A register renamer from PR to VR, calculates maximum live registers.

    IR.py: An IR class that uses a deque to have O(1) pushing and popping operations. 

    Record.py: A record class that allocates a list of size 14 to be used as a single record in the IR. 
